package com.everis.hello.shoplist.app.ports.output;

import com.everis.hello.shoplist.app.domain.model.ShopList;
import com.everis.hello.shoplist.app.exception.ShopListNotFoundException;

import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * @author EnricRG
 */
public interface ShopListRepository {
    /**
     * Checks if the repository contains at least one list with a given list name for a given user.
     *
     * @param owner Owner of the list.
     * @param listName Name of the list.
     *
     * @return Whether the list exists for that user or not.
     */
    boolean listExists(@NotNull String owner, @NotNull String listName);

    /**
     * Retrieves the list with a given list name for a given user. If the list does not exist, it produces a
     * {@link ShopListNotFoundException}.
     *
     * @param owner Owner of the list.
     * @param listName Name of the list.
     *
     * @return The {@link ShopList} found.
     * @throws ShopListNotFoundException When the list does not exist.
     */
    ShopList getShopList(@NotNull String owner, @NotNull String listName) throws ShopListNotFoundException;

    /**
     * Retrieves the lists owned by a given user. If the user has no lists or the user is not registered, this method
     * will return empty list.
     *
     * @param owner Owner of the list.
     *
     * @return The lists owned by the user. Never null.
     */
    List<ShopList> getShopLists(@NotNull String owner);

    /**
     * Synchronizes the {@link ShopList} object to persistent storage. If the list didn't exist in the repository, it
     * must be created. If the list already existed, its state should be synchronized to match the object given to this
     * call.
     *
     * @param shopList ShopList to persist/update.
     *
     * @return A potentially modified instance of the original object that may contain persistence-generated
     *         fields (like insertion dates or autogenerated sequence numbers). Users of this API should use the
     *         returned instance after this call.
     */
    ShopList save(@NotNull ShopList shopList);

    /**
     * Checks how many lists does a given user own in this repository.
     *
     * @param owner Owner of the lists.
     *
     * @return The number of lists this user owns.
     */
    int userListQuantity(@NotNull String owner);

    /**
     * Deletes a list owned by provided user from this repository. This interface does not restrict whether the removal
     * of the list is logical or physical. If the list does not exist in this repository it must not fail, and instead
     * return {@code false}.
     *
     * @param owner Owner of the list.
     * @param listName Name of the list.
     *
     * @return {@code true} when the list existed and has been removed from the repository, {@code false} if the list
     *         did not exist.
     */
    boolean deleteList(@NotNull String owner, @NotNull String listName);
}
